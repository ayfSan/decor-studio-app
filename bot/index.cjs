const TelegramBot = require("node-telegram-bot-api");
const logger = require("./logger.cjs");
const axios = require("axios");
require("dotenv").config();

const token = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL;
const apiUrl = process.env.API_URL || "http://localhost:3000/api";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å —É—á–µ—Ç–æ–º –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
const getWebAppUrl = (path = "") => {
  const baseUrl = webAppUrl.endsWith("/") ? webAppUrl.slice(0, -1) : webAppUrl;
  return path ? `${baseUrl}/#${path}` : baseUrl;
};

const bot = new TelegramBot(token, { polling: true });

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  await logger.logUser(msg.from);
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  await logger.logCommand(chatId, "start");

  bot.sendMessage(
    chatId,
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Decor Studio!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
    {
      reply_markup: {
        keyboard: [
          ["üìÖ –°–æ–±—ã—Ç–∏—è", "üí∞ –£—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤"],
          ["üë• –ö–æ–º–∞–Ω–¥–∞", "üìù –ó–∞–¥–∞—á–∏"],
          ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùì –ü–æ–º–æ—â—å"],
        ],
        resize_keyboard: true,
      },
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /help –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å"
bot.onText(/\/help/, sendHelp);
bot.on("message", async (msg) => {
  if (msg.text === "‚ùì –ü–æ–º–æ—â—å") {
    await sendHelp(msg);
  }
});

async function sendHelp(msg) {
  const chatId = msg.chat.id;
  await logger.logCommand(chatId, "help");

  const helpText = `
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*

*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:*
üìÖ –°–æ–±—ã—Ç–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
üí∞ –£—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç
üë• –ö–æ–º–∞–Ω–¥–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
üìù –ó–∞–¥–∞—á–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
#—Å–æ–±—ã—Ç–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì +/-–°–£–ú–ú–ê –æ–ø–∏—Å–∞–Ω–∏–µ

–ù–∞–ø—Ä–∏–º–µ—Ä:
#—Å–≤–∞–¥—å–±–∞ 01.05.2024 -5000 –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–ª

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/link <code> - –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É –≤ CRM
`;
  bot.sendMessage(chatId, helpText, { parse_mode: "Markdown" });
}

// --- –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ---

// 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link <code>
bot.onText(/\/link (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const code = match[1]; // –ö–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  await handleLinkCommand(chatId, code);
});

// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–¥–æ–º –ø—Ä–∏–≤—è–∑–∫–∏
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
bot.onText(/^[A-Z0-9]{6}$/, async (msg) => {
  // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /link
  if (msg.text.startsWith("/")) return;

  const chatId = msg.chat.id;
  const code = msg.text;
  await handleLinkCommand(chatId, code);
});

// 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
async function handleLinkCommand(chatId, code) {
  await logger.logCommand(chatId, "link", { code });

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à –±—ç–∫–µ–Ω–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
    const response = await axios.post(`${apiUrl}/telegram/link-account`, {
      code: code,
      chat_id: chatId,
    });

    if (response.data.success) {
      bot.sendMessage(
        chatId,
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤ CRM."
      );
      await logger.logInfo(
        `Account linked for chatId ${chatId} with code ${code}`
      );
    }
  } catch (error) {
    let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";
    if (error.response) {
      // –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª –Ω–∞—à API
      switch (error.response.status) {
        case 404:
          errorMessage =
            "‚ùå –£–ø—Å! –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.";
          break;
        case 409:
          errorMessage =
            "‚ùå –≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.";
          break;
        default:
          errorMessage = `‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${
            error.response.data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É."
          }`;
      }
    } else {
      // –°–µ—Ç–µ–≤—ã–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ axios
      errorMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞.";
    }

    bot.sendMessage(chatId, errorMessage);
    await logger.logError(
      `Failed to link account for chatId ${chatId}. Error: ${error.message}`
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  switch (text) {
    case "üìÖ –°–æ–±—ã—Ç–∏—è":
      await logger.logCommand(chatId, "events_button");
      bot.sendMessage(
        chatId,
        "üìÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üéØ –û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—ã—Ç–∏—è",
                  web_app: { url: getWebAppUrl("/events") },
                },
              ],
              [
                {
                  text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π",
                  callback_data: "events_stats",
                },
              ],
              [{ text: "üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data: "create_event" }],
            ],
          },
        }
      );
      break;

    case "üí∞ –£—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤":
      await logger.logCommand(chatId, "cash_button");
      bot.sendMessage(chatId, "üí∞ *–£—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üìä –û—Ç–∫—Ä—ã—Ç—å —É—á–µ—Ç",
                web_app: { url: getWebAppUrl("/cash") },
              },
            ],
            [
              {
                text: "üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é",
                callback_data: "add_transaction",
              },
            ],
            [{ text: "üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data: "finance_report" }],
          ],
        },
      });
      break;

    case "üë• –ö–æ–º–∞–Ω–¥–∞":
      await logger.logCommand(chatId, "team_button");
      bot.sendMessage(
        chatId,
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üë• –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫",
                  web_app: { url: getWebAppUrl("/members") },
                },
              ],
              [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data: "add_member" }],
              [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã", callback_data: "team_stats" }],
            ],
          },
        }
      );
      break;

    case "üìù –ó–∞–¥–∞—á–∏":
      await logger.logCommand(chatId, "todo_button");
      bot.sendMessage(
        chatId,
        "üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìã –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏",
                  web_app: { url: getWebAppUrl("/todo") },
                },
              ],
              [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data: "add_todo" }],
              [{ text: "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data: "todo_progress" }],
            ],
          },
        }
      );
      break;

    case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
      await logger.logCommand(chatId, "settings_button");
      bot.sendMessage(chatId, "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                web_app: { url: getWebAppUrl("/settings") },
              },
            ],
            [{ text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: "notifications" }],
            [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data: "profile" }],
          ],
        },
      });
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: #—Å–æ–±—ã—Ç–∏–µ –¥–∞—Ç–∞ —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ
  const match = text?.match(
    /^#(\w+)\s+(\d{2}\.\d{2}\.\d{4})\s+([+-]\d+)\s+(.+)$/
  );

  if (match) {
    const [, eventTag, date, amount, description] = match;

    try {
      const transaction = {
        eventTag,
        date,
        amount: parseInt(amount),
        description,
        timestamp: new Date(),
        chatId,
      };

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await logger.logTransaction(chatId, transaction);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const amountText = amount.startsWith("+")
        ? `–¥–æ—Ö–æ–¥ ${amount}`
        : `—Ä–∞—Å—Ö–æ–¥ ${amount.substring(1)}`;
      const confirmationMessage = `
‚úÖ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞*

üí∞ –°—É–º–º–∞: ${amountText} —Ä—É–±.
üìÖ –°–æ–±—ã—Ç–∏–µ: #${eventTag}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}
üìÜ –î–∞—Ç–∞: ${date}
‚è± –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: ${new Date().toLocaleTimeString()}

_–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–£—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤"_
`;

      bot.sendMessage(chatId, confirmationMessage, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üìä –û—Ç–∫—Ä—ã—Ç—å —É—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤",
                web_app: { url: getWebAppUrl("/cash") },
              },
            ],
            [{ text: "üí∞ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data: "add_transaction" }],
          ],
        },
      });
    } catch (error) {
      await logger.logError(chatId, error, {
        type: "transaction",
        data: { eventTag, date, amount, description },
      });
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
      bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–§–æ—Ä–º–∞—Ç: #—Å–æ–±—ã—Ç–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì +/-–°–£–ú–ú–ê –æ–ø–∏—Å–∞–Ω–∏–µ"
      );
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;

  await logger.logAction(chatId, "button_click", { button: action });

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Å–µ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
  bot.answerCallbackQuery(query.id);

  switch (action) {
    case "add_transaction":
      bot.sendMessage(
        chatId,
        "üí∞ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n#—Å–æ–±—ã—Ç–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì +/-–°–£–ú–ú–ê –æ–ø–∏—Å–∞–Ω–∏–µ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n#—Å–≤–∞–¥—å–±–∞ 01.05.2024 -5000 –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–ª",
        { parse_mode: "Markdown" }
      );
      break;
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_query
  }
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on("web_app_data", async (msg) => {
  const chatId = msg.chat.id;
  await logger.logWebAppOpen(chatId, msg.web_app_data.data);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("polling_error", async (error) => {
  console.log(error);
  await logger.logError("system", error, { type: "polling_error" });
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
